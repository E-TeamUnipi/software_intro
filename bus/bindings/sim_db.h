/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.13 Mon Dec 16 13:40:02 2024.
 */

#ifndef SIM_H
#define SIM_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SIM_PPS_SENSORS_FRAME_ID (0x08u)
#define SIM_COOLING_SENSORS_FRAME_ID (0x18u)
#define SIM_INVERTER_TEMP_FRAME_ID (0x20u)
#define SIM_FAN_CTRL_FRAME_ID (0x10u)

/* Frame lengths in bytes. */
#define SIM_PPS_SENSORS_LENGTH (4u)
#define SIM_COOLING_SENSORS_LENGTH (2u)
#define SIM_INVERTER_TEMP_LENGTH (2u)
#define SIM_FAN_CTRL_LENGTH (1u)

/* Extended or standard frame types. */
#define SIM_PPS_SENSORS_IS_EXTENDED (0)
#define SIM_COOLING_SENSORS_IS_EXTENDED (0)
#define SIM_INVERTER_TEMP_IS_EXTENDED (0)
#define SIM_FAN_CTRL_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define SIM_INVERTER_TEMP_CYCLE_TIME_MS (500u)
#define SIM_FAN_CTRL_CYCLE_TIME_MS (100u)

/* Signal choices. */


/* Frame Names. */
#define SIM_PPS_SENSORS_NAME "pps_sensors"
#define SIM_COOLING_SENSORS_NAME "cooling_sensors"
#define SIM_INVERTER_TEMP_NAME "inverter_temp"
#define SIM_FAN_CTRL_NAME "fan_ctrl"

/* Signal Names. */
#define SIM_PPS_SENSORS_PPS_NAME "pps"
#define SIM_PPS_SENSORS_PPS_INV_NAME "pps_inv"
#define SIM_COOLING_SENSORS_THERMOCOUPLE_NAME "thermocouple"
#define SIM_INVERTER_TEMP_TEMP_NAME "temp"
#define SIM_FAN_CTRL_FAN_PWM_DUTY_NAME "fan_pwm_duty"

/**
 * Signals in message pps_sensors.
 *
 * pps readings
 *
 * All signal values are as on the CAN bus.
 */
struct sim_pps_sensors_t {
    /**
     * non-inverting PPS voltage
     *
     * Range: 0..5000 (0..5000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pps;

    /**
     * inverting PPS voltage
     *
     * Range: 0..5000 (0..5000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t pps_inv;
};

/**
 * Signals in message cooling_sensors.
 *
 * thermocouple voltage
 *
 * All signal values are as on the CAN bus.
 */
struct sim_cooling_sensors_t {
    /**
     * Voltage on the thermocouple end
     *
     * Range: 0..5000 (0..5000 mV)
     * Scale: 1
     * Offset: 0
     */
    uint16_t thermocouple;
};

/**
 * Signals in message inverter_temp.
 *
 * Inverter temperature message for diagnostics
 *
 * All signal values are as on the CAN bus.
 */
struct sim_inverter_temp_t {
    /**
     * Inverter temperature
     *
     * Range: 0..1200 (0..120 C)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t temp;
};

/**
 * Signals in message fan_ctrl.
 *
 * fan pwm control
 *
 * All signal values are as on the CAN bus.
 */
struct sim_fan_ctrl_t {
    /**
     * fan PWM duty cycle
     *
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fan_pwm_duty;
};

/**
 * Pack message pps_sensors.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sim_pps_sensors_pack(
    uint8_t *dst_p,
    const struct sim_pps_sensors_t *src_p,
    size_t size);

/**
 * Unpack message pps_sensors.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sim_pps_sensors_unpack(
    struct sim_pps_sensors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from pps_sensors.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sim_pps_sensors_init(struct sim_pps_sensors_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sim_pps_sensors_pps_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sim_pps_sensors_pps_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sim_pps_sensors_pps_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sim_pps_sensors_pps_inv_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sim_pps_sensors_pps_inv_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sim_pps_sensors_pps_inv_is_in_range(uint16_t value);

/**
 * Pack message cooling_sensors.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sim_cooling_sensors_pack(
    uint8_t *dst_p,
    const struct sim_cooling_sensors_t *src_p,
    size_t size);

/**
 * Unpack message cooling_sensors.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sim_cooling_sensors_unpack(
    struct sim_cooling_sensors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from cooling_sensors.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sim_cooling_sensors_init(struct sim_cooling_sensors_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sim_cooling_sensors_thermocouple_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sim_cooling_sensors_thermocouple_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sim_cooling_sensors_thermocouple_is_in_range(uint16_t value);

/**
 * Pack message inverter_temp.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sim_inverter_temp_pack(
    uint8_t *dst_p,
    const struct sim_inverter_temp_t *src_p,
    size_t size);

/**
 * Unpack message inverter_temp.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sim_inverter_temp_unpack(
    struct sim_inverter_temp_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from inverter_temp.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sim_inverter_temp_init(struct sim_inverter_temp_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t sim_inverter_temp_temp_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sim_inverter_temp_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sim_inverter_temp_temp_is_in_range(uint16_t value);

/**
 * Pack message fan_ctrl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int sim_fan_ctrl_pack(
    uint8_t *dst_p,
    const struct sim_fan_ctrl_t *src_p,
    size_t size);

/**
 * Unpack message fan_ctrl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int sim_fan_ctrl_unpack(
    struct sim_fan_ctrl_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from fan_ctrl.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int sim_fan_ctrl_init(struct sim_fan_ctrl_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t sim_fan_ctrl_fan_pwm_duty_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float sim_fan_ctrl_fan_pwm_duty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool sim_fan_ctrl_fan_pwm_duty_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
